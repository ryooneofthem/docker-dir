# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
default $http_x_forwarded_proto;
'' $scheme;
}
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
default upgrade;
'' '';
}

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
upstream app {
    #server 172.17.0.2:8080 fail_timeout=0 weight=2;
    #server 172.17.0.3:8080 fail_timeout=0 weight=3;
    server 172.17.0.9:8080 fail_timeout=0 weight=5;
    #server 172.17.0.9:8080;
    keepalive 2048;
}
server {
        listen 80;
        server_name _;
        resolver 127.0.0.1;
        ignore_invalid_headers off;
        underscores_in_headers on;
        root /www/;

        location / {
          try_files $uri $uri/ @webapp;
        }
        location @webapp {
                #proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
                #proxy_set_header Host $http_host;
                proxy_redirect off;
                #proxy_buffering off;
                proxy_pass http://app;
        }
        location /socket.io {
                #break;
                proxy_pass http://app/socket.io;
                proxy_redirect off;
                proxy_buffering off;

                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "Upgrade";
        }
}

